1. java - intelliJ 
2. HTML, CSS, JS - VSCODE < CSR > // 이거 쓸거야
3. REACT - VSCODE < CRS > // 이거 쓸거야
4. DB - WORKBANCH // 이거 쓸거야
5. SERVLET - ECLIPSE <서버연결>
6. SPRING BOOT - intelliJ <서버연결, 여기서 CSS 넣으면 SSR> // 이거 쓸거야

의존되는 쪽에서 @Autowired


@Controller : 
DI : 의존성 주입 , 결합도 낮추는 행위 EX) Autowired
IoC : IoC 컨테이너에 있는 IoC 를 가져오는 행위 >> DI 를 자동화 해주는 특징


@Autowired 달려있는 모든 class에는 @어노테이션으로 ioc-container 에 등록해줘야함
 => 서로 component 이어야지만 autowired 가능

<ioc container 에 등록하는 방법 2가지>
1. 클래스 위에 @Conponent
2. 클래스 위에 @Configuration + 메소드 위에 @Bean


<Spring MVC패턴> 
            // GET/test
클라이언트 -요청-> 톰캣(HTTPServletRequest, Rep 생성) -호출-> DispatchServlet -호출-> HandlerMapping
               
1. 크롬에서 요청이 들어오면 DispatcherServlet이 REQUEST객체를 HandlerMapping한테 보내서 Controller가 있는지 확인 
 -> HandlerMapping의 return 은 호출해야하는 메소드
2. 있으면 Controller 호출해서 렌더링하려는 데이터(modleandview 자료형 or String = view에 담길 model를 만들어줌) 를 return 해줌
 -> String : veiwname
3. 그 데이터(String - viewname) 를 가지고 ViewResolver 한테 보내면 완성된 view(HTML파일) 를 찾아서 return 해줌 // 어떤 HTML 을 열어야하는지 알려줌
4. 그 view로 View한테 주면 view객체를 생성 후 랜더링해서(Model와 HTML파일을 합쳐서 view객체에 담고 그걸 랜더링) 화면에 보여짐 // View의 return은 HTML !!


MODEL : 페이지의 정보를 담는 거(데이터) , VIEW : HTML
servlet에서는 servlet - controller, view - jsp, model - request 역할을 했었음

<MVC가 생긴 이유>
MODEL1 : jsp에서 HTML 코드 안에서 Scriptlet으로 HTML + JAVA 작성 -> 뒤죽박죽 // MODEL + VIEW
MODEL2 : jsp에서 HTML 코드 안에서 동일한 Servlet안에 HTML(위) 과 JAVA(아래) 에 작성 -> 깔끔
MVC : 똑같은 페이지인데 안에 데이터만 바뀜  // MODEL 과 VIEW를 완전 따로 분리해서 작성 // 분리된 M과 V를 선택해서 합쳐주는게 Controller


<HTTP 의 양식>
1. REQUEST
 - header : 정보 // 메소드, URL, 서버IP, 서버 PORT
 - body : 데이터(값) // 파라미터
2. RESPONSE 
 - header : 정보 // 쿠키, 응답 컨텐츠 타입
 - body : 데이터(값) // JSON, HTML



<ResponseBody 어노테이션>
ViewResolver와 View를 거치지 않고 바로 크롬으로 응답해주는거
controller 에서 바로 response로 return


응답을 객체형태로 보내는 것
{ key1: value, key2 : value }